<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.dockerignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.dockerignore" />
              <option name="updatedContent" value="node_modules&#10;npm-debug.log&#10;.git&#10;.gitignore&#10;README.md&#10;.env&#10;.nyc_output&#10;coverage&#10;.env.local&#10;.env.development.local&#10;.env.test.local&#10;.env.production.local&#10;.DS_Store&#10;Thumbs.db&#10;*.log&#10;brave_opener&#10;LOAD_UNPACKED&#10;*.md&#10;.prettierrc&#10;start.bat&#10;update.bat" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="FROM node:22-alpine&#10;&#10;# Install system dependencies for canvas&#10;RUN apk add --no-cache \&#10;    cairo-dev \&#10;    jpeg-dev \&#10;    pango-dev \&#10;    musl-dev \&#10;    gcc \&#10;    g++ \&#10;    make \&#10;    python3&#10;&#10;# Set working directory&#10;WORKDIR /app&#10;&#10;# Copy package files&#10;COPY package*.json ./&#10;&#10;# Install dependencies&#10;RUN npm ci --only=production&#10;&#10;# Copy application code&#10;COPY . .&#10;&#10;# Create data directory&#10;RUN mkdir -p ./data&#10;&#10;# Expose port&#10;EXPOSE 80&#10;&#10;# Set default environment&#10;ENV NODE_ENV=production&#10;ENV PORT=80&#10;&#10;# Create non-root user&#10;RUN addgroup -g 1001 -S nodejs&#10;RUN adduser -S wplacer -u 1001&#10;&#10;# Change ownership of app directory&#10;RUN chown -R wplacer:nodejs /app&#10;USER wplacer&#10;&#10;# Start the application&#10;CMD [&quot;npm&quot;, &quot;start&quot;]&#10;" />
              <option name="updatedContent" value="FROM node:22-alpine&#10;&#10;# Install system dependencies for canvas and healthchecks&#10;RUN apk add --no-cache \&#10;    cairo-dev \&#10;    jpeg-dev \&#10;    pango-dev \&#10;    musl-dev \&#10;    gcc \&#10;    g++ \&#10;    make \&#10;    python3 \&#10;    curl&#10;&#10;# Set working directory&#10;WORKDIR /app&#10;&#10;# Copy package files&#10;COPY package*.json ./&#10;&#10;# Install dependencies&#10;RUN npm ci --only=production&#10;&#10;# Copy application code&#10;COPY . .&#10;&#10;# Create data directory with proper permissions&#10;RUN mkdir -p ./data&#10;&#10;# Create non-root user first&#10;RUN addgroup -g 1001 -S nodejs&#10;RUN adduser -S wplacer -u 1001&#10;&#10;# Change ownership of app directory&#10;RUN chown -R wplacer:nodejs /app&#10;&#10;# Switch to non-root user&#10;USER wplacer&#10;&#10;# Expose port&#10;EXPOSE 80&#10;&#10;# Set default environment&#10;ENV NODE_ENV=production&#10;ENV PORT=80&#10;&#10;# Add healthcheck&#10;HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \&#10;    CMD curl -f http://localhost:$PORT/ || exit 1&#10;&#10;# Start the application&#10;CMD [&quot;node&quot;, &quot;server.js&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/coolify.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/coolify.md" />
              <option name="originalContent" value="# Coolify Configuration&#10;# This file contains configuration for deploying wplacer with Coolify&#10;&#10;# Build Configuration&#10;DOCKERFILE_PATH=./Dockerfile&#10;DOCKER_COMPOSE_PATH=./docker-compose.yml&#10;&#10;# Environment Variables for Coolify&#10;PORT=80&#10;NODE_ENV=production&#10;&#10;# Health Check&#10;HEALTH_CHECK_PATH=/&#10;HEALTH_CHECK_INTERVAL=30&#10;HEALTH_CHECK_TIMEOUT=10&#10;HEALTH_CHECK_RETRIES=3&#10;&#10;# Volume Mounts&#10;# Coolify will automatically handle persistent volumes for:&#10;# - /app/data (for logs and application data)&#10;&#10;# Network Configuration&#10;# Default HTTP port: 80&#10;# The application will be accessible via the domain configured in Coolify&#10;&#10;# Notes for Coolify Deployment:&#10;# 1. Set environment variables in Coolify UI if needed&#10;# 2. The application uses persistent storage for data directory&#10;# 3. Logs are written to /app/data/logs.log and /app/data/errors.log&#10;# 4. Make sure to configure domain/subdomain in Coolify&#10;# 5. SSL/TLS will be handled automatically by Coolify&#10;" />
              <option name="updatedContent" value="# Coolify Configuration&#10;# This file contains configuration for deploying wplacer with Coolify&#10;&#10;# Build Configuration&#10;DOCKERFILE_PATH=./Dockerfile&#10;DOCKER_COMPOSE_PATH=./docker-compose.yml&#10;&#10;# Environment Variables for Coolify&#10;NODE_ENV=production&#10;PORT=80&#10;&#10;# Health Check&#10;HEALTH_CHECK_PATH=/&#10;HEALTH_CHECK_INTERVAL=30&#10;HEALTH_CHECK_TIMEOUT=10&#10;HEALTH_CHECK_RETRIES=3&#10;HEALTH_CHECK_START_PERIOD=40&#10;&#10;# Volume Mounts&#10;# Coolify will automatically handle persistent volumes for:&#10;# - /app/data (for logs and application data)&#10;&#10;# Network Configuration&#10;# Default HTTP port: 80&#10;# The application will be accessible via the domain configured in Coolify&#10;&#10;# Notes for Coolify Deployment:&#10;# 1. Set environment variables in Coolify UI if needed&#10;# 2. The application uses persistent storage for data directory&#10;# 3. Logs are written to /app/data/logs.log and /app/data/errors.log&#10;# 4. Make sure to configure domain/subdomain in Coolify&#10;# 5. SSL/TLS will be handled automatically by Coolify&#10;&#10;# Coolify Deployment Configuration für wplacer&#10;&#10;## Umgebungsvariablen für Coolify&#10;# Setze diese Variablen in der Coolify-UI:&#10;&#10;# NODE_ENV=production&#10;# PORT=80&#10;&#10;## Build-Konfiguration&#10;# - **Dockerfile**: `./Dockerfile`&#10;# - **Build Context**: Root-Verzeichnis&#10;# - **Port**: 80 (Standard, kann über PORT-Variable geändert werden)&#10;&#10;## Gesundheitschecks&#10;# - **Pfad**: `/` (Root-Route)&#10;# - **Intervall**: 30 Sekunden&#10;# - **Timeout**: 10 Sekunden&#10;# - **Wiederholungen**: 3&#10;# - **Start-Periode**: 40 Sekunden&#10;&#10;## Persistente Daten&#10;# Das `/app/data` Verzeichnis wird automatisch als Volume gemountet für:&#10;# - Anwendungsdaten&#10;# - Log-Dateien (`logs.log`, `errors.log`)&#10;&#10;## Deployment-Notizen für Coolify&#10;# 1. **Domain**: Konfiguriere Domain/Subdomain in Coolify&#10;# 2. **SSL**: Wird automatisch von Coolify verwaltet&#10;# 3. **Logs**: Verfügbar über Coolify-Interface oder in `/app/data/`&#10;# 4. **Updates**: Push zu GitHub löst automatisches Rebuild aus&#10;# 5. **Rollback**: Über Coolify-Interface verfügbar&#10;&#10;## Behobene Probleme&#10;# - ✅ Healthcheck verwendet jetzt `curl` statt `wget`&#10;# - ✅ Entfernt `--env-file=.env` aus package.json&#10;# - ✅ Verbesserte Container-Berechtigungen&#10;# - ✅ Flexiblere Port-Konfiguration&#10;# - ✅ Optimierte .dockerignore für schnellere Builds&#10;&#10;## Troubleshooting&#10;# Falls der Container nicht startet:&#10;# 1. Prüfe Logs in Coolify-Interface&#10;# 2. Überprüfe Umgebungsvariablen&#10;# 3. Stelle sicher, dass Port 80 nicht blockiert ist&#10;# 4. Kontrolliere Healthcheck-Status" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;&#10;services:&#10;  wplacer:&#10;    build: .&#10;    container_name: wplacer&#10;    restart: unless-stopped&#10;    ports:&#10;      - &quot;80:80&quot;&#10;    environment:&#10;      - NODE_ENV=production&#10;      - PORT=80&#10;    volumes:&#10;      - wplacer_data:/app/data&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;wget&quot;, &quot;--no-verbose&quot;, &quot;--tries=1&quot;, &quot;--spider&quot;, &quot;http://localhost:80/&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;      start_period: 40s&#10;&#10;volumes:&#10;  wplacer_data:&#10;    driver: local&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;services:&#10;  wplacer:&#10;    build: .&#10;    container_name: wplacer&#10;    restart: unless-stopped&#10;    ports:&#10;      - &quot;${PORT:-80}:${PORT:-80}&quot;&#10;    environment:&#10;      - NODE_ENV=production&#10;      - PORT=${PORT:-80}&#10;    volumes:&#10;      - wplacer_data:/app/data&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:${PORT:-80}/&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;      start_period: 40s&#10;&#10;volumes:&#10;  wplacer_data:&#10;    driver: local" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;wplacer&quot;,&#10;  &quot;version&quot;: &quot;4.0.1&quot;,&#10;  &quot;main&quot;: &quot;server.js&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;node --env-file=.env .&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;canvas&quot;: &quot;^3.2.0&quot;,&#10;    &quot;cors&quot;: &quot;^2.8.5&quot;,&#10;    &quot;express&quot;: &quot;^5.1.0&quot;,&#10;    &quot;impit&quot;: &quot;0.5.3&quot;,&#10;    &quot;tough-cookie&quot;: &quot;^6.0.0&quot;&#10;  },&#10;  &quot;engines&quot;: {&#10;    &quot;node&quot;: &quot;&gt;=22.0.0&quot;,&#10;    &quot;npm&quot;: &quot;&gt;=10.0.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;prettier&quot;: &quot;^3.6.2&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#13;&#10;  &quot;name&quot;: &quot;wplacer&quot;,&#13;&#10;  &quot;version&quot;: &quot;4.0.1&quot;,&#13;&#10;  &quot;main&quot;: &quot;server.js&quot;,&#13;&#10;  &quot;type&quot;: &quot;module&quot;,&#13;&#10;  &quot;scripts&quot;: {&#13;&#10;    &quot;start&quot;: &quot;node server.js&quot;&#13;&#10;  },&#13;&#10;  &quot;dependencies&quot;: {&#13;&#10;    &quot;canvas&quot;: &quot;^3.2.0&quot;,&#13;&#10;    &quot;cors&quot;: &quot;^2.8.5&quot;,&#13;&#10;    &quot;express&quot;: &quot;^5.1.0&quot;,&#13;&#10;    &quot;impit&quot;: &quot;0.5.3&quot;,&#13;&#10;    &quot;tough-cookie&quot;: &quot;^6.0.0&quot;&#13;&#10;  },&#13;&#10;  &quot;engines&quot;: {&#13;&#10;    &quot;node&quot;: &quot;&gt;=22.0.0&quot;,&#13;&#10;    &quot;npm&quot;: &quot;&gt;=10.0.0&quot;&#13;&#10;  },&#13;&#10;  &quot;devDependencies&quot;: {&#13;&#10;    &quot;prettier&quot;: &quot;^3.6.2&quot;&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>